AWSTemplateFormatVersion: 2010-09-09
Description: Processing Infrastructure for the udacity capstone project
Parameters:
  resourcePrefix:
    Description: Prefix for all resources
    Type: String
    Default: udacity-capstone
  sshKeyName:
    Description: SSH Key to Use for the Spark Cluster
    Type: AWS::EC2::KeyPair::KeyName
  bootstrapActionFilePath:
    Description: S3 bucket path to a file including bootstrap actions for the EMR cluster
    Type: String
  emrClusterReleaseVersion:
    Description: Release label for the EMR cluster packages. Determines the versions of the applications to be installed
    Type: String
    Default: emr-5.30.1

Resources:

  ################################################
  ########## IAM

  emrRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - !Ref resourcePrefix
          - emr-cluster-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - elasticmapreduce.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  emrEc2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - !Ref resourcePrefix
          - emr-cluster-ec2-instance-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  emrEc2InstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        InstanceProfileName:  !Join 
          - '-'
          - - !Ref resourcePrefix
            - emr-cluster-ec2-instance-profile
        Path: /
        Roles:
          - !Ref emrEc2InstanceRole

  ################################################
  ########## Buckets

  emrLogsBucket:
    Type: 'AWS::S3::Bucket'
    # setting the DeletionPolicy to Retain because we can't delete a non-empty bucket with cloudformation
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref resourcePrefix
          - emr-cluster-logs

  ################################################
  ##########  Spark Cluster
  
  emrCluster:
    Type: 'AWS::EMR::Cluster'
    # not absolutely needed because the EMR cluster takes so long to initialize, but is the correct way to do things
    DependsOn: 
      - emrSubnetRouteTableAssociation
      - emrSubnet
    Properties:
      Name: !Join 
        - '-'
        - - !Ref resourcePrefix
          - emr-cluster
      Applications: 
        - Name: Spark
        - Name: Livy
        - Name: Hadoop
        - Name: Hive
      EbsRootVolumeSize: 10
      VisibleToAllUsers: true
      ReleaseLabel: !Ref emrClusterReleaseVersion
      JobFlowRole: !Ref emrEc2InstanceProfile
      ServiceRole: !Ref emrRole
      Instances:
        Ec2KeyName: !Ref sshKeyName
        Ec2SubnetId: !Ref emrSubnet
        EmrManagedMasterSecurityGroup: !GetAtt emrMasterSecurityGroup.GroupId
        EmrManagedSlaveSecurityGroup: !GetAtt emrSlaveSecurityGroup.GroupId
        KeepJobFlowAliveWhenNoSteps: true
        MasterInstanceFleet:
          Name: Master Instance Fleet
          TargetOnDemandCapacity: 1
          InstanceTypeConfigs:
            - InstanceType: m5.xlarge
            # use a big driver so we can do the ML training there too
            # - InstanceType: m5.8xlarge
        CoreInstanceFleet:
          Name: Core Instance Fleet
          TargetOnDemandCapacity: 2
          InstanceTypeConfigs:
            - InstanceType: m5.xlarge
      BootstrapActions:
        - Name: Install custom Python packages
          ScriptBootstrapAction: 
            Path: !Ref bootstrapActionFilePath
      LogUri: !Join 
        - ''
        - - 's3://'
          - !Ref emrLogsBucket
          - /emr-logs

  ################################################
  ########## Networking

  emrSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref emrSubnet
      RouteTableId: !ImportValue 'projectVPCRouteTable'

  emrSubnet:
    Type: AWS::EC2::Subnet
    #DependsOn:
    #  - emrSubnetRouteTableAssociation
    Properties:
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !ImportValue 'projectVPC'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref resourcePrefix
              - emr-subnet

  emrMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join 
        - ''
        - - !Ref resourcePrefix
          - -emr-master-security-group
      GroupDescription: !Join 
        - ' '
        - - !Ref resourcePrefix
          - Security Group for the master nodes of the EMR Cluster 
      VpcId: !ImportValue 'projectVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: 'Public SSH access to the spark cluster'  
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  emrSlaveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join 
        - ''
        - - !Ref resourcePrefix
          - -emr-slave-security-group
      GroupDescription: !Join 
        - ' '
        - - !Ref resourcePrefix
          - Security Group for slave nodes of the EMR Cluster
      VpcId: !ImportValue 'projectVPC'
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  emrMasterSecurityGroupIngressAllowMasterTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrMasterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref emrMasterSecurityGroup

  emrMasterSecurityGroupIngressAllowSlaveTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrMasterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref emrSlaveSecurityGroup
  
  emrMasterSecurityGroupIngressAllowAllTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrMasterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
  
  emrSlaveSecurityGroupIngressAllowMasterTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrSlaveSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref emrMasterSecurityGroup
  
  emrSlaveSecurityGroupIngressAllowSlaveTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrSlaveSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref emrSlaveSecurityGroup
  
  emrSlaveSecurityGroupIngressAllowMasterUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrSlaveSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref emrMasterSecurityGroup
  
  emrSlaveSecurityGroupIngressAllowSlaveUDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrSlaveSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref emrSlaveSecurityGroup
  
  emrSlaveSecurityGroupIngressAllowMasterICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrSlaveSecurityGroup.GroupId
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref emrMasterSecurityGroup
  
  emrSlaveSecurityGroupIngressAllowSlaveICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt emrSlaveSecurityGroup.GroupId
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref emrSlaveSecurityGroup
  
  projectResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: !Join 
        - ''
        - - !Ref resourcePrefix
          - -resource-group
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
        Query:
          StackIdentifier: !Ref AWS::StackId

Outputs:
  emrClusterId:
    Value: !Ref emrCluster
  emrClusterPublicDNS:
    Value: !GetAtt emrCluster.MasterPublicDNS
  resourceGroupName:
    Value: !Ref projectResourceGroup
  emrLogsBucketName:
    Value: !Ref emrLogsBucket
